BaseStructure
=应用分组(App Group)=
这是一种策略，而非一个具体的结点，它由AR维护。
一个应用分组，就是一个具体的用户应用

==目标或职责==

   # 能够将应用分布到MG中
   # 过应用分组（AG）对应一个具体的应用。
   # 考虑：一台机器上有多个应用，如何区分这些应用。不同的URI，在每台机器上支持，在AG层封装，对外透明

==AG创建的策略==
每个分组有来自不同MG中的至少2台机器，一个MN可以属于多个AG，但一个AG中不能只有来自一个MG中的机器。多台机器资源保证该应用的可用性；来自不同的分组，保证分组更新的时候应用的可用性。实际上，AG创建的策略是属于MR管理的，参考下面AG的创建过程。

结点可以分为两类：用于管理的结点，用于参与服务的结点
每台机器（MN）都被按两种方式分类：MG，AG。MRNode的目的是可以对机器进行批量的管理，并且不影响正常的服务。ARNode提供对应用的管理。一个AG就是一个应用的运行环境，可以出现一台MN同时属于多个AG的情况，表现为：一台机器同时为多个应用服务；当应用大的时候，他的AG中可能都是独占的 MN（该MN不会负载其他应用，向AG加入的时候，最小单位是MN还是MN上能承载的应用数量？？并不合理，大小应用难衡量）。
多个版本同时服务的问题，之前考虑过多个AG同时为一个应用服务，但如果把多个版本当成不同的应用来看的话，会发现这种做法没有必要。

每个AG是一个具体的应用，根据应用的大小不同，拥有的MN也不同。

==AG的创建过程==

   # AR接收到外部的创建应用请求后，向MR请求机器资源
   # MR接收请求，根据应用的容量要求，返n个MN给AR。
   # AR将得到的MN创建一个AG，并提交给AD进行发布（在此之前应用已经上传到ADNode）。每个发布结束将状态通知AR。发布过程出现错误怎么处理？
   # 发布完毕后，该AG标记该AG可以开始服务
   # 通知Client，Client是应用的一个统一入口，提供软件的loadbalance



支持动态增加AG中的机器机器数量，过程类似，需要修改AR维护的列表，以及通知所有的Clients修改负载均衡的列表