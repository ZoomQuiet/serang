BaseStructure
=沙箱=
感觉这是最麻烦的地方，相信GAE也有在这里面临一些问题。

==为保证MN结点的稳定运行，必须对用户应用作一些限制，以下情况不被允许：==

   # 操作文件系统，包括写和直接读
   # 无限制使用内存
   # 死循环，无限制的循环，深层递归
   # 一次请求的超时，比如超过n秒还没结束
   # 直接开socket等方式连接其他的任何地方
   # 开线程，偷偷摸摸作其他的事情
   # 任何AE提供的以外的方式对其他系统的调用
   # 运行监控，比如cpu占用率等等，向监控结点（作为独立的应用存在，参考）汇总统计；报告当前结点的异动情况，如：一次请求的占用率超过平
均水平的1.5倍。

==实现方式==
   # 操作系统层面处理
   # 或按时间片执行用户程序,用户的程序并非真正的执行代码，可行性小
   # 修改后的python运行环境，可行性最大，但要限制用户自己加载一些底层的东西

==存在方式==
    运行于每个MN结点上

==GAE的沙箱==
     作了个简单的测试，发现大量占用内存的时候它会报告MemoryError，还没测试最大能使用多少内存
     对于死循环，大约10秒中后，会报：DeadlineExceededError，并指出出问题的代码。而实际上，GAE对每次请求中，程序
的运行时间作了控制，就算只wait()，也很快会因为超时抛出这个错误。 而这个时间估计就是10秒。
     这样还是有漏洞，因为这段时间内，假如死循环在运行，还是会占用机器的所有资源，不知道有什么其他的处理方式。另外，一旦超时，需要作什么处理，杀死程序，返回错误？

     查看以下GAE返回的错误信息：
{{{
This request used a high amount of CPU, and was roughly 1.5 times over
the average request CPU limit. High CPU requests have a small quota,
and if you exceed this quota, your app will be temporarily disabled.
}}}
     原来有这样的强硬处理方式 