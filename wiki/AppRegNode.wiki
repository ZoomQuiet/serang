BaseStructure
=应用注册结点(App Reg Node)=
==目标或职责==

   # 响应用户的应用发布，为应用申请机器资源，并建立AG
   # 调度AD，在申请到的资源上发布应用
   # 接受MR的指令，完成对AG中机器的减少或增加
   # 通过某些判断策略，动态修改AG中的机器数(后期)

==应用（分组）- 机器 (MN) - URI（作为应用的唯一标示，也用于应用的定位）==
||*AppGroup*||*MachineNode*||*	URI??*||
||album||	"10.0.10.1" ||	/album/||
||      || 	"10.0.10.8" || /album/||
||forum||	"10.0.10.1" || /forum/||
||      ||	"10.0.10.9" ||	/forum/||

还要记录每个应用需要作的事情，比如拉下n机器后，需要恢复n机器。当机器被拉下，如果需要恢复，AR不等待被拉下的机器，而是立刻向MR申请，MR将目前空闲的资源交给AR。

==提供以下管理接口==
||*接口*||	*调用方*||	*描述*||
||  ||用户 ||注册应用 ||
||  || 用户||停止应用 ||
||  ||self ||创建应用分组 ||
||  ||用户/self/MR || 向分组增加资源||
||  || 用户/self/MR|| 从分组减少资源||
||  ||负载均衡？ ||查询应用分组所在的位置（MNs） ||

==调用以下API==
||*接口*||	*服务方*||	*描述*||
|| || MR||请求机器资源||
	

	 	