===为什么MachineNode用CGI方式===
===为什么在MachineNode上使用Lighttpd+FCGI===

    # Apache/Nginx是针对每个应用服务器连接分配固定Size的Buffer，如果使用mod_fastcgi模块，Apache的接收缓冲区是8KB；使用mod_fcgid模块，接收缓冲区是64KB。如果页面数据超过8/64KB，FastCGI进程被挂在render方法上！必须等到Web服务器的缓冲区清空，把页面数据全部接收下来以后，FastCGI进程才能结束本次调用，处理下一个请求。
    
    # Lighttpd并不针对应用服务器的每个连接分配固定的Buffer，而是尽可能的把应用服务器返回的数据一次性接收下来，因此无论应用服务器返回多大的数据量，Lighttpd都是全收。

    # 如此看来，不能用Apache/Nginx搭配FastCGI应用服务器，通过CGI和python链接的时候最好采用Lighttpd。

    # 另外，FCGI不会自己开buffer，和FCGI的实现也有关系？当一次交互添不满8/64KB时，会有什么问题？

===为什么在ClientNode上使用Nginx===
    # 对于静态文件的处理，Nginx是有绝对优势，相对apache的优势可不是一点半点。从目前的[http://survey.netcraft.com/Reports/200806/ 统计数据]上看，Nginx的增长速度也的确很快。仅次于Apache。

    # Nginx的loadbalance以及 reconfiguration and online upgrade without interruption of the client processing 功能，可以使client变个很灵活，符合之前对client功能的期望。
    
    # Nginx在多种系统上支持sendfile(sendfile (FreeBSD 3.1+), sendfile (Linux 2.2+), sendfile64 (Linux 2.4.21+), and sendfilev (Solaris 8 7/01+) support)，可以方便在Client上完成静态文件的处理
     
===静态文件和动态文件要分离吗，如果分离，应用结构需要怎么变化===

    之前在考虑应用发布的时候，把整个应用一股脑的丢在MachineNode上，应用中的静态文件也是丢过去给MachineNode处理。如果每个MachineNode上配置sendfile的支持，如果Nginx的代理也是只过网卡的，就没关系了



GAE是GFE(google frontend)