BaseStructure
=机器分组=
这是一种策略，而非一个具体的结点，它由MR维护
==目标或职责==

   # 为应用提供一堆的硬件资源，这些资源可以被更新、维护并且不会影响到应用的运行。通过简单的方式就能管理。
   # 它们被集中管理，这些MN可以随时被增加或减少，并允许在运行中出现故障。
   # 它们被分组管理。每个分组内保持相同数量的机器，各个分组上的应用负载尽量相同，保持在一个分组被拉下后，对所有应用的影响尽量小。
   # 每次AR的请求，都返回至少2个MG中的2个MN结点
   # 对所有的机器进行监控



==一台新的MN加入的流程==

   # 要求：能够自动安装并加入分组
   # 向BED结点申请为它安装基础环境，这个结点可以和MR合并吗，不想功能混淆，这个问题等同于AR和应用发布结点之间的问题。保证流程一致的角度来看，则从MR发起更合理，对于应用的发布采用这种方式以对比。
   # 完成后，该MN向MR注册
   # MRNode为该MN分配分组或创建新的分组
   # 记录该MN处于空闲状态并开始对它的监控。
   # 该机器的IP如何分配？


==应用的基础环境更新==

   # 由MR调度拉下(从AR)一个MG
   # 并记录该MG所属的所有应用分组(AG)
   # 通知BED更新该MG
   # 当整个MG更新成功后，MR通知AR将该MG加回，如果运行环境会影响到应用，则不能这样处理
   # 一个分组内，是否提供某种机制，让它们相互复制？


==MG中的某台机器出现问题==

   # 由MR调度拉下(从AR)出问题的MN
   # 并记录该MN所有应用分组(AG)
   # 寻找未被分配的MN加入该分组
   # 并将该MN加会之前的AG中


==MRNode负责的工作==

   # 对机器的管理（增加、减少、更新环境）、监控，
   # 记录每台机器的使用情况，响应创建应用分组的请求，根据使用的情况以及应用的要求，决定MN是否可以被分组重用等问题
   # 对分组管理，保持各个分组内机器一致
   # 响应创建应用分组的请求，返回一组机器给应用分组。

==MN如何分配给AG==
一台机器资源可以同时属于多个应用分组，在弄清楚如何分配流量之前，是这样考虑的，第一种方案：应用要求独占一台MN+MR跟据监控的流量来决定一台MN是否可以为多个AG服务。另一种简单的方案是应用要求独占一台MN+固定每个MN可以参与的AG个数。因为有的应用的访问量会很低，或者非默认版本的访问量很低，所以第一种方案更节约资源。如何能做到动态分配，根据长期的运行统计，将不怎么使用的应用，尽量的合并到一部分节点上。并通知AR更新它所维护的列表，对AR基本透明。