SeRang
=基础系统结构=

==名词约定==
|| AE || appEngine ||
|| MachineNode(MN)  || 机器节点，AE中的一台提供服务的机器 ||
|| MachineRegNode(MR) || 机器注册节点，用于管理AN（从硬件的角度）、机器分组 ||
|| AppRegNode(AN) ||应用注册节点，管理用户应用、应用分组 ||
|| MachineGroup(MG) ||维护分组，机器分组，分组内有等量的MN，可以整体拉下、环境升级 ||
|| AppGroup(AG) ||应用分组，对应一个具体的应用 ||
|| BaseEnvDeployNode(BED) ||基础服务发布节点 ||
|| AppDeployNode(AD) || 应用发布节点 ||
|| ClientNode || 用于在AG上作动态负载均衡，动态指AG中的机器数量可以动态变化 ||
|| SandBox || 为保证MN结点的稳定运行，必须对用户应用作一些限制 ||

==整个AE的结构上，分为三个部分==
http://5460.appspot.com/?id=agQ1NDYwcgwLEgVQaG90bxjfAQw&detail=true?nonsense=something_that_ends_with.png
===访问入口===
    提供一种响应访问请求的策略，支持在一群动态组合的机器上作负载均衡，访问流程的制定
===应用管理层===
   接收到发布请求时，申请到一些机器资源，然后在这些资源上安装应用，并将这些资源组合成一个服务。不关心机器出问题怎么处理，机器的运行环境更新如何适应，不关心这个Group中的机器是如何被组织的，如何扩展，如何防止单点问题。
这一层要处理的问题包括：

   # 应用的发布协调
   # 应用的管理和组织(怎么把应用放到一堆机器中，并记住它们在那里)
   # 动态的增加或减少AppGroup中的机器，要装在哪些机器上，是资源层告诉应用层的

===硬件资源管理层===
组织硬件资源，要处理的问题包括：

   # 响应应用层的请求，将一堆机器资源提供给给应用发布
   # 合理的组合机器资源，提供环境的更新功能，并切不影响应用的运行
   # 动态替换出问题的机器

==AE整体结构设想如下图==
http://5460.appspot.com/?id=agQ1NDYwcgwLEgVQaG90bxjdAQw&detail=true?nonsense=something_that_ends_with.png


下面开始描述各种结点的详细作用以及他们之间的协作关系。

   # 机器分组
   # 机器注册结点
   # 基础应用发布结点
   # 运行App的机器结点
   # 应用分组
   # 应用注册结点
   # 应用发布结点
   # Clients的负载均衡
   # 沙箱
   # 管理平台